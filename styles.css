/* Root color scheme */
html {
  toggle-root: mode [auto light dark];
}

html:toggle(mode light) {
  --mode: 'light';
  --brand: var(--violet-9);
  --bg: var(--gray-1);
  --callout: var(--gray-2);
  --text: var(--gray-9);
  --grad: var(--pink-1);
}

html:toggle(mode dark) {
  --mode: 'dark';
  --brand: var(--violet-3);
  --bg: var(--gray-9);
  --callout: var(--gray-8);
  --text: var(--gray-2);
  --grad: var(--pink-9);
}

.mode-btn {
  toggle-trigger: mode;
}

.mode-btn::after {
  content: ': ' var(--mode, 'auto');
}

/* Binary switch */
.todo li {
  toggle: todo self;
  cursor: pointer;
  padding: 0.25em;
  list-style-type: '❌ ';
}

.todo li:hover {
  background-color: var(--callout);
}

.todo li:toggle(todo) {
  list-style-type: '✅ ';
}

/* Accordion */
.accordion>dt {
  toggle: glossary;
  cursor: pointer;
  display: list-item;
  padding: 0.25em;
  list-style-type: '👉🏽 ';
}

.accordion>dt:hover {
  background-color: var(--callout);
  color: var(--brand);
}

.accordion>dt:toggle(glossary) {
  background-color: var(--brand);
  color: var(--bg);
}

.accordion>dt:toggle(glossary) {
  list-style-type: '👇🏽 ';
}

.accordion>dd {
  toggle-visibility: toggle glossary;
}

/* Tree view */
.nested {
  toggle: tree;
}

.nested+ul {
  toggle-visibility: toggle tree;
}

.nested {
  background: none;
  border: none;
  padding: 0;
  color: var(--brand);
}

.nested::before {
  content: '+ ';
}

.nested:toggle(tree)::before {
  content: '- ';
}

/* Tabs */
panel-set {
  display: grid;
  grid-template: 'tab tab tab' auto 'card card card' auto / auto auto 1fr;
}

/* Each tab creates a sticky toggle
(so once it’s open, clicking again won’t close it),
opts into the group,
and declares itself a toggle activator */
panel-tab {
  toggle: tab 1 at 0 group sticky;
  grid-row: tab;
  padding: 0.5em 1em;
  cursor: pointer;
}

/* first tab toggled by default */
/* panel-tab:first-child {
  toggle: tab 1 at 1 group sticky;
} */

panel-tab:toggle(tab) {
  background-color: var(--callout);
}

panel-card {
  toggle-visibility: toggle tab;
  grid-area: card;
  padding: 1em;
  background-color: var(--callout);
}

panel-card pre {
  padding: 0;
  border: 0;
}

/* Named states */
.colors {
  toggle-root: colors [grape green blue red] at blue;
}

.colors button {
  toggle-trigger: colors;
}

.colors button.grape {
  toggle-trigger: colors grape;
}

.colors button.green {
  toggle-trigger: colors green;
}

.colors button.blue {
  toggle-trigger: colors blue;
}

.colors button.red {
  toggle-trigger: colors red;
}

.show-colors {
  background: var(--gray-9);
  color: var(--gray-1);
}

.show-colors:toggle(colors grape) {
  background-color: var(--grape-9);
}

.show-colors:toggle(colors green) {
  background-color: var(--green-9);
}

.show-colors:toggle(colors blue) {
  background-color: var(--blue-9);
}

.show-colors:toggle(colors red) {
  background-color: var(--red-9);
}

/* State machines */
@machine request {
  idle {
    try: loading;
  }

  loading {
    resolve: success;
    reject: failure;
    reset: idle;
  }

  failure {
    try: loading;
    reset: idle;
  }

  success {
    reset: idle;
  }
}

.request {
  toggle-root: machine(request);
}

.request button[data-do="try"] {
  toggle-trigger: request do(try);
}

.request button[data-do="resolve"] {
  toggle-trigger: request do(resolve);
}

.request button[data-do="reject"] {
  toggle-trigger: request do(reject);
}

.request button[data-do="reset"] {
  toggle-trigger: request do(reset);
}

.request .status {
  padding: 1em;
  margin: 1em 0;
  background: var(--gray-9);
  color: var(--gray-1);
}

.request .status:toggle(request idle) {
  background-color: var(--gray-8);
  --status-note: 'try';
}

.request .status:toggle(request loading) {
  background-color: var(--yellow-9);
  --status-note: 'resolve | reject';
}

.request .status:toggle(request failure) {
  background-color: var(--red-9);
  --status-note: 'try (again)';
}

.request .status:toggle(request success) {
  background-color: var(--green-9);
  --status-note: 'none';
}

.request .status:before {
  content: attr(data-toggle);
}

.request .status:after {
  content: ' » ' var(--status-note);
}
